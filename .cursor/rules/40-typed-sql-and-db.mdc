---
description: TypedSQL patterns and database raw query guidance
globs:
  - "apps/backend/prisma/sql/**"
  - "apps/backend/src/app/modules/**"
alwaysApply: false
---

# TypedSQL & Database Rules

## Prisma Client vs Raw SQL Decision Tree

**PREFER Prisma Client when:**
- Simple CRUD operations
- Standard relationships and joins
- OAuth account management (CRITICAL: use upsert patterns)
- User management and basic queries

**Use TypedSQL when:**
- Complex joins not ergonomic in Prisma Client
- Performance-critical read paths with explicit SQL + indexes
- Complex aggregations or window functions
- Bulk operations that need optimization

## Raw SQL Guidelines

1. Raw SQL Location: Put each statement in its own file under `apps/backend/prisma/sql/`.
2. Naming: Filenames must be valid JS identifiers (no dashes at start) for generated function names.
3. Parameters: Use positional `$1`, `$2` with optional `-- @param {Type} $1:name` comments for clarity.
4. Generation: Run `yarn db:generate` after adding/modifying SQL to re-generate typed functions.
5. Execution: Use `prisma.$queryRawTyped(queryName(...params))` for type safety.
6. Tests: Every new TypedSQL query should have at least one test verifying shape/performance assumptions.
7. Indexing: Add indexes via Prisma migrations when query performance needs it. Document rationale in migration comment.
8. Safety: Avoid dynamic column interpolation. If unavoidable, validate against allowlist and document.
9. Traceability: Above usages add a comment referencing the source `.sql` file.

## Critical Warnings

⚠️ **OAuth Authentication**: Never change OAuth account creation from Prisma upsert to raw SQL - causes P2002 unique constraint errors.

⚠️ **Documentation**: Always document when deviating from Prisma Client patterns with clear warnings about potential issues.

## Quality & Safety

- Always apply pending migrations before running `prisma generate --sql`
- Ensure any new raw queries are covered by at least one unit/integration test before merging
- Add comments referencing the originating `.sql` file above any usage site for traceability
